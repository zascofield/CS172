import java.awt.*;
import java.util.ArrayList;
import java.util.Iterator;

public class Board {

    private char[][] grid = new char[8][8];
    private char turn;
    private int x;
    private int y;
    private ArrayList<int[]> destinationSquares;

    public Board() {
        //pre-sets the board with the pieces on the outside, and the first turn is given to black
        for (int x = 0; x < 8; x++) {
            for (int y = 0; y < 8; y++) {
                if (x > 0 && x < 7 && (y == 0 || y == 7)) {
                    grid[x][y] = 'B';
                } else if (y == 0 || y == 7 || x != 0 && x != 7) {
                    grid[x][y] = 'E';
                } else {
                    grid[x][y] = 'W';
                }
            }
        }
        turn = 'B';
        x = -1;
        y = -1;
        destinationSquares = new ArrayList(64);
        StdDraw.setScale(-0.5, 7.5);
        StdDraw.enableDoubleBuffering();
    }

    public ArrayList<int[]> getDestinationSquares() {
        return this.destinationSquares;
    }

    public void setX(int x) {
        this.x = x;
    }

    public void setY(int y) {
        this.y = y;
    }

    public void draw() {
        StdDraw.clear();
        StdDraw.square(0.5, 0.5, 0.8);

        for (int x = 0; x < 8; x++) {
            for (int y = 0; y < 8; y++) {
                StdDraw.setPenColor(StdDraw.GRAY);
                StdDraw.filledSquare(x, y, 0.5);
                StdDraw.setPenColor(StdDraw.BLACK);
                StdDraw.filledSquare(x, y, 0.5);
                if (grid[x][y] == 'W') {
                    StdDraw.setPenColor(StdDraw.WHITE);
                    StdDraw.filledCircle(x, y, 0.4);
                } else if (grid[x][y] == 'B') {
                    StdDraw.setPenColor(StdDraw.BLACK);
                    StdDraw.filledCircle(x, y, 0.4);
                }
            }
        }

        if (x != -1) {
            if (grid[x][y] != 'E') {
                StdDraw.setPenColor(Color.RED);
                StdDraw.circle(x, y, 0.42);
            }
            this.calculateSquares();
        }
        StdDraw.show();
    }

    //counts number of filled squares in the horizontal direction
    public int countX (int x, int y) {
        int xcount = 0;
        for (int i = 0; i < 8; i++) {
            if (grid[i][y] != 'E') {
                xcount++;
            }
        }
        return xcount;
    }

    //counts number of filled squares in the vertical direction
    public int countY (int x, int y) {
        int ycount = 0;
        for (int i = 0; i < 8; i++) {
            if (grid[x][i] != 'E') {
                ycount++;
            }
        }
        return ycount;
    }

    //counts the diagonal squares in one direction
    public int countDiagonal1 (int x, int y) {
        int diagonal1Count = 0;
        int x1;
        int y1;

        if (x > y) {
            x1 = x - y;
            for (y1 = 0; x1 < 8; y1++) {
                if (grid[x1][y1] != 'E') {
                    diagonal1Count++;
                }
                x1++;
            }
        } else {
            x1 = 0;
            for (y1 = y - x; y1 < 8; y1++) {
                if (grid[x1][y1] != 'E') {
                    diagonal1Count++;
                }
                x1++;
            }
        }
        return diagonal1Count;
    }

    //counts the diagonal squares in another direction
    public int countDiagonal2 (int x, int y) {
        int diagonal2Count = 0;
        int x1;
        int y1;
        if (x < 7 - y) {
            x1 = 0;
            for (y1 = y + x; y1 >= 0; y1--) {
                if (grid[x1][y1] != 'E') {
                    diagonal2Count++;
                }
                x1++;
            }
        } else {
            x1 = x - (7 - y);
            for (y1 = 7; x1 < 8; y1--) {
                if (grid[x1][y1] != 'E') {
                    diagonal2Count++;
                }
                x1++;
            }
        }
        return diagonal2Count;
    }

    private void calculateSquares() {
        int x = this.x;
        int y = this.y;
        int xcount = this.countX(x, y);
        int ycount = this.countY(x, y);
        int diagonal1Count = this.countDiagonal1(x, y);
        int diagonal2Count = this.countDiagonal2(x, y);
        this.XYMove(xcount, ycount);
    }

    public void XYMove (int xcount, int ycount) {
        int x = this.x;
        int y = this.y;
        boolean rightBlock = false;
        boolean leftBlock = false;
        boolean upBlock = false;
        boolean downBlock = false;
        char oT = this.turn = 'W';

        for (int i = 0; i < 8; i++) {
            if (grid[i][y] == oT && i < x + xcount) {
                rightBlock = true;
            }
            if (grid[i][y] == oT && i > x - xcount) {
                leftBlock = true;
            }
            if (grid[i][y] == oT && i < y + ycount) {
                upBlock = true;
            }
            if (grid[i][y] == oT && i > y - ycount) {
                downBlock = true;
            }
        }

        if (x + xcount <= 7 && grid[x + xcount][y] != turn && !rightBlock) {
            destinationSquares.add(new int[]{x + xcount, y});
        }

        if (x - xcount >= 0 && grid[x - xcount][y] != turn && !leftBlock) {
            destinationSquares.add(new int[]{x - xcount, y});
        }

        if (y + ycount <= 7 && grid[x][y + ycount] != turn && !upBlock) {
            destinationSquares.add(new int[]{x, y + ycount});
        }

        if (y - ycount >= 0 && grid[x][y - ycount] != turn && !downBlock) {
            destinationSquares.add(new int[]{x, y - ycount});
        }

        Iterator var = destinationSquares.iterator();

        while (var.hasNext()) {
            int[] destination = (int[]) var.next();
            System.out.printf("Destination options: %d, %d\n", destination[0], destination[1]);
        }

    }

}
