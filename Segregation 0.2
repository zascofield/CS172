public class Segregation {
    // used to fill in blue squares
    public static int fillBlueAgent (double x, double y) {
        StdDraw.setPenColor(StdDraw.BLUE);
        StdDraw.filledSquare (x + 0.45, y + 0.45, 0.5);
        return 2;
    }

    //used to fill in red squares
    public static int fillRedAgent(double x, double y) {
        StdDraw.setPenColor(StdDraw.RED);
        StdDraw.filledSquare (x + 0.45, y + 0.45, 0.5);
        return 1;
    }

    //used to fill in white empty squares
    public static int fillEmpty(double x, double y) {
        StdDraw.setPenColor(StdDraw.WHITE);
        StdDraw.filledSquare (x + 0.45, y + 0.45, 0.5);
        return 0;
    }

    public static void initGrid (int[][] grid) {
        for (int i = 0; i < grid.length; ++i) {
            for (int n = 0; n < grid[0].length; ++n) {
                grid[i][n] = 0;
            }
        }
    }

    public static void drawGrid(int[][] grid) {
        StdDraw.clear();
        for (int i = 0; i < grid.length; ++i) {
            for (int j = 0; j < grid[0].length; ++j) {
                if (grid[i][j] == 0) {
                    fillEmpty(i, j);
                }
                if (grid[i][j] == 1) {
                    fillBlueAgent(i, j);

                }
                if (grid[i][j] == 2) {
                    fillRedAgent(i, j);
                }
            }
        }
    }

    public static boolean testMiddleSquare (int[][] grid) {
        int x = 1;
        int y = 1;
        int similar = 0;
        int total = 4;
        double satisfied = 0.3;
        if (grid[x][y - 1] == grid[x][y]) {
            ++similar;
        }
        if (grid[x + 1][y] == grid[x][y]) {
            ++similar;
        }
        if (grid[x][y + 1] == grid[x][y]) {
            ++similar;
        }
        if (grid[x - 1][y] == grid[x][y]) {
            ++similar;
        }
        if (similar/total >= satisfied) {
            return true;
        } else return false;
    }
    public static void main (String[] args) {
        StdDraw.enableDoubleBuffering();
        //the parameters that can be changed before each run
        int pause = 40;
        int size = 30;
        double similar = 0.2;
        double red = 0.45;
        double empty = 0.1;
        double blue = 0.45;

        int test = 0;
        boolean run = true;
        int[][] grid = new int[size][size];
        int[][] unsat = new int[size][size];
        int[][] blank = new int [size][size];
        int redtot = 0;
        int bluetot = 0;
        int emptytot;

        //initializes the entire array
        initGrid(grid);
        initGrid(unsat);
        initGrid(blank);

        int x = 0;
        int y = 0;
        StdDraw.setXscale(0, size);
        StdDraw.setYscale(0, size);
        StdDraw.setPenColor(StdDraw.BLACK);

        //draws the vertical lines
        for (int i = 0; i < size; ++i) {
            StdDraw.line(i, 0, i, size);
            ++x;
        }

        //draws the horizontal lines
        for (int i = 0; i < size; ++i) {
            StdDraw.line(0, i, size, i);
            ++y;
        }

        //randomly fills in the red squares and counts the number of them
        for (int i = 0; i < red * size * size; ++i) {
            int randomx = StdRandom.uniform(0, size);
            int randomy = StdRandom.uniform(0, size);
            fillRedAgent(randomx, randomy);
            grid[randomx][randomy] = 1;
            ++redtot;
        }

        //randomly fills in the blue squares and counts the number of them
        for (int n = 0; n < blue * size * size; ++n) {
            int randomx = StdRandom.uniform(0, size);
            int randomy = StdRandom.uniform(0, size);
            if (grid[randomx][randomy] == 0) {
                fillBlueAgent(randomx, randomy);
                grid[randomx][randomy] = 2;
                ++bluetot;
            } else {
                --n;
            }
        }

        //prints out the number of empty, red, and blue squares
        StdDraw.show();
        emptytot = (size * size) - (redtot + bluetot);
        StdOut.println("Empty: " + emptytot);
        StdOut.println("Red: " + redtot);
        StdOut.println("Blue: " + bluetot);

        int round = 0;
        while (run) {
            for (int i = 0; i < size; ++i) {
                for (int n = 0; n < size; ++n) {
                    unsat[i][n] = 0;
                    double sim = 0;
                    double tot;
                    if (grid[i][n] == 0) {
                        blank[i][n] = 1;
                    }
                    else if (grid[i][n] != 0) {
                        // for squares that are in the middle of the grid
                        tot = 4;
                        if (i > 0 && i < size-1 && n > 0 && n < size-1) {
                            if (grid[i][n - 1] == grid[i][n]) {
                                ++sim;
                            }
                            if (grid[i + 1][n] == grid[i][n]) {
                                ++sim;
                            }
                            if (grid[i][n + 1] == grid[i][n]) {
                                ++sim;
                            }
                            if (grid[i - 1][n] == grid[i][n]) {
                                ++sim;
                            }
                        } else if (i == 0 && n == 0) {
                            //for the square in the bottom left corner
                            tot = 2;
                            if (grid[i + 1][n] == grid[i][n]) {
                                ++sim;
                            }
                            if (grid[i][n + 1] == grid[i][n]) {
                                ++sim;
                            }
                        } else if (i == size-1 && n == 0) {
                            //for the square in the top left corner
                            tot = 2;
                            if (grid[i - 1][n] == grid[i][n]) {
                                ++sim;
                            }
                            if (grid[i][n + 1] == grid[i][n]) {
                                ++sim;
                            }
                        } else if (i == 0 && n == size - 1) {
                            //for the square in the bottom right corner
                            tot = 2;
                            if (grid[i + 1][n] == grid[i][n]) {
                                ++sim;
                            }
                            if (grid[i][n - 1] == grid[i][n]) {
                                ++sim;
                            }
                        } else if (i == size - 1 && n == size - 1) {
                            //for the square in the top right corner
                            tot = 2;
                            if (grid[i - 1][n] == grid[i][n]) {
                                ++sim;
                            }
                            if (grid[i][n - 1] == grid[i][n]) {
                                ++sim;
                            }
                        } else if (i == 0) {
                            tot = 3;
                            if (grid[i][n + 1] == grid[i][n]) {
                                ++sim;
                            }
                            if (grid[i + 1][n] == grid[i][n]) {
                                ++sim;
                            }
                            if (grid[i][n - 1] == grid[i][n]) {
                                ++sim;
                            }
                        } else if (n == 0) {
                            tot = 3;
                            if (grid[i - 1][n] == grid[i][n]) {
                                ++sim;
                            }
                            if (grid[i][n + 1] == grid[i][n]) {
                                ++sim;
                            }
                            if (grid[i + 1][n] == grid[i][n]) {
                                ++sim;
                            }
                        } else if (i == size - 1) {
                            tot = 3;
                            if (grid[i][n - 1] == grid[i][n]) {
                                ++sim;
                            }
                            if (grid[i - 1][n] == grid[i][n]) {
                                ++sim;
                            }
                            if (grid[i][n + 1] == grid[i][n]) {
                                ++sim;
                            }
                        } else {
                            tot = 3;
                            if (grid[i - 1][n] == grid[i][n]) {
                                ++sim;
                            }
                            if (grid[i][n - 1] == grid[i][n]) {
                                ++sim;
                            }
                            if (grid[i + 1][n] == grid[i][n]) {
                                ++sim;
                            }
                        }
                        double t = sim/tot;
                        if (t < similar) {
                            unsat[i][n] = 1;
                            test++;
                        }
                    }
                }
            }
            if (test == 0) {
                run = false;
                StdOut.println("Finished!");
            } else {
                int temp;
                boolean nzero = false;
                for (int i = 0; i < size; ++i) {
                    for (int n = 0; n < size; ++n) {
                        if (nzero && n == 0) {
                            nzero = false;
                        } else if (nzero) {
                            --n;
                            nzero = false;
                        }
                        if (unsat[i][n] == 1) {
                            temp = grid[i][n];
                            x = StdRandom.uniform(0, size-1);
                            y = StdRandom.uniform(0, size-1);
                            if (blank[x][y] != 1) {
                                nzero = true;
                            } else {
                                grid[x][y] = temp;
                                grid[i][n] = 0;
                                blank[x][y] = 0;
                                blank[i][n] = 1;
                            }
                        }
                        if (grid[i][n] == 1) {
                            fillRedAgent(i, n);
                        } else if (grid[i][n] == 0) {
                            fillEmpty(i, n);
                        } else if (grid[i][n] == 2) {
                            fillBlueAgent(i, n);
                        }
                    }
                }
            }
            StdDraw.pause(pause);
            StdDraw.show();
            round++;
        }
        StdOut.println(round);
    }
}
