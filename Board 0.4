import java.awt.*;
import java.util.ArrayList;
import java.util.Iterator;

public class Board {

    private final char[][] grid = new char[8][8];
    private char turn;
    private int x;
    private int y;
    private final ArrayList<int[]> destinationSquares;

    public Board() {
        //pre-sets the board with the pieces on the outside, and the first turn is given to black
        for (int x = 0; x < 8; x++) {
            for (int y = 0; y < 8; y++) {
                if (x > 0 && x < 7 && (y == 0 || y == 7)) {
                    grid[x][y] = 'B';
                } else if (y == 0 || y == 7 || x != 0 && x != 7) {
                    grid[x][y] = 'E';
                } else {
                    grid[x][y] = 'W';
                }
            }
        }
        turn = 'B';
        x = -1;
        y = -1;
        destinationSquares = new ArrayList(64);
        StdDraw.setScale(-0.5, 7.5);
        StdDraw.enableDoubleBuffering();
    }

    public ArrayList<int[]> getDestinationSquares() {
        return this.destinationSquares;
    }

    public void setX(int x) {
        this.x = x;
    }

    public void setY(int y) {
        this.y = y;
    }

    public void draw() {
        StdDraw.clear();
        StdDraw.square(0.5, 0.5, 0.8);

        for (int x = 0; x < 8; x++) {
            for (int y = 0; y < 8; y++) {
                StdDraw.setPenColor(StdDraw.GRAY);
                StdDraw.filledSquare(x, y, 0.5);
                StdDraw.setPenColor(StdDraw.BLACK);
                StdDraw.square(x, y, 0.5);
                if (grid[x][y] == 'W') {
                    StdDraw.setPenColor(StdDraw.WHITE);
                    StdDraw.filledCircle(x, y, 0.4);
                } else if (grid[x][y] == 'B') {
                    StdDraw.setPenColor(StdDraw.BLACK);
                    StdDraw.filledCircle(x, y, 0.4);
                }
            }
        }

        if (x != -1) {
            if (grid[x][y] != 'E') {
                StdDraw.setPenColor(Color.RED);
                StdDraw.circle(x, y, 0.42);
            }
            this.calculateSquares();
        }
        StdDraw.show();
    }

    //counts number of filled squares in the horizontal direction
    public int countX(int x, int y) {
        int xcount = 0;
        for (int i = 0; i < 8; i++) {
            if (grid[i][y] != 'E') {
                xcount++;
            }
        }
        return xcount;
    }

    //counts number of filled squares in the vertical direction
    public int countY(int x, int y) {
        int ycount = 0;
        for (int i = 0; i < 8; i++) {
            if (grid[x][i] != 'E') {
                ycount++;
            }
        }
        return ycount;
    }

    //counts the diagonal squares in one direction
    public int countDiagonal1(int x, int y) {
        int diagonal1Count = 0;
        int x1;
        int y1;

        if (x > y) {
            x1 = x - y;
            for (y1 = 0; x1 < 8; y1++) {
                if (grid[x1][y1] != 'E') {
                    diagonal1Count++;
                }
                x1++;
            }
        } else {
            x1 = 0;
            for (y1 = y - x; y1 < 8; y1++) {
                if (grid[x1][y1] != 'E') {
                    diagonal1Count++;
                }
                x1++;
            }
        }
        return diagonal1Count;
    }

    //counts the diagonal squares in another direction
    public int countDiagonal2(int x, int y) {
        int diagonal2Count = 0;
        int x1;
        int y1;
        if (x < 7 - y) {
            x1 = 0;
            for (y1 = y + x; y1 >= 0; y1--) {
                if (grid[x1][y1] != 'E') {
                    diagonal2Count++;
                }
                x1++;
            }
        } else {
            x1 = x - (7 - y);
            for (y1 = 7; x1 < 8; y1--) {
                if (grid[x1][y1] != 'E') {
                    diagonal2Count++;
                }
                x1++;
            }
        }
        return diagonal2Count;
    }

    private void calculateSquares() {
        int x = this.x;
        int y = this.y;
        int xcount = this.countX(x, y);
        int ycount = this.countY(x, y);
        int diagonal1Count = this.countDiagonal1(x, y);
        int diagonal2Count = this.countDiagonal2(x, y);
        this.XYMove(xcount, ycount);
        this.diagonalMove(diagonal1Count, diagonal2Count);
        this.drawDestination();
    }

    public void XYMove(int xcount, int ycount) {
        int x = this.x;
        int y = this.y;
        boolean rightBlock = false;
        boolean leftBlock = false;
        boolean upBlock = false;
        boolean downBlock = false;
        char T = turn;

        if (turn == 'W') {
            turn = 'B';
        } else if (turn == 'B') {
            turn = 'W';
        }

        for (int i = 0; i < 8; i++) {
            if (grid[i][y] == T && i < x + xcount) {
                rightBlock = true;
            }
            if (grid[i][y] == T && i > x - xcount) {
                leftBlock = true;
            }
            if (grid[i][y] == T && i < y + ycount) {
                upBlock = true;
            }
            if (grid[i][y] == T && i > y - ycount) {
                downBlock = true;
            }
        }

        if (x + xcount <= 7 && grid[x + xcount][y] != turn && rightBlock) {
            destinationSquares.add(new int[]{x + xcount, y});
        }

        if (x - xcount >= 0 && grid[x - xcount][y] != turn && leftBlock) {
            destinationSquares.add(new int[]{x - xcount, y});
        }

        if (y + ycount <= 7 && grid[x][y + ycount] != turn && upBlock) {
            destinationSquares.add(new int[]{x, y + ycount});
        }

        if (y - ycount >= 0 && grid[x][y - ycount] != turn && downBlock) {
            destinationSquares.add(new int[]{x, y - ycount});
        }

        Iterator var = destinationSquares.iterator();

        while (var.hasNext()) {
            int[] destination = (int[]) var.next();
            System.out.printf("Destination options: %d, %d\n", destination[0], destination[1]);
        }

    }

    public void diagonalMove(int diagonal1Count, int diagonal2Count) {
        int x = this.x;
        int y = this.y;
        boolean NW = true;
        boolean SE = true;
        boolean NE = true;
        boolean SW = true;
        char T = turn;

        if (turn == 'W') {
            turn = 'B';
        } else if (turn == 'B') {
            turn = 'W';
        }

        int x1 = x - 1;
        int y1 = y + 1;

        //moving the piece in the NW direction
        int k;
        for (k = 0; k < diagonal2Count - 1; ++k) {
            if (x1 < 0 || y1 > 7) {
                NW = false;
                break;
            }
            if (this.grid[x1][y1] == T) {
                NW = false;
            }
            --x1;
            ++y1;
        }

        x1++;
        y1--;

        //moving the piece in the SE direction
        for (k = 0; k < diagonal2Count - 1; ++k) {
            if (y1 < 0 || x1 > 7) {
                SE = false;
                break;
            }
            if (this.grid[x1][y1] == T) {
                SE = false;
            }
            ++x1;
            --y1;
        }

        x1 = x + 1;
        y1 = y + 1;

        //moving the piece in the NE direction
        for (k = 0; k < diagonal1Count - 1; ++k) {
            if (y1 > 7 || x1 > 7) {
                NE = false;
                break;
            }
            if (this.grid[x1][y1] == T) {
                NE = false;
            }
            ++x1;
            ++y1;
        }

        x1 = x - 1;
        y1 = y - 1;

        //moving the piece in the SW direction
        for (k = 0; k < diagonal1Count - 1; ++k) {
            if (x1 < 0 || y1 < 0) {
                SW = false;
                break;
            }
            if (this.grid[x1][y1] == T) {
                SW = false;
            }
            --x1;
            --y1;
        }

        if (NW && x - diagonal2Count >= 0 && y + diagonal2Count <= 7 && grid[x - diagonal2Count][y + diagonal2Count] != turn) {
            destinationSquares.add(new int[]{x - diagonal2Count, y + diagonal2Count});
        }

        if (SE && x + diagonal2Count <= 7 && y - diagonal2Count >= 0 && grid[x + diagonal2Count][y - diagonal2Count] != turn) {
            destinationSquares.add(new int[]{x + diagonal2Count, y - diagonal2Count});
        }

        if (NE && x + diagonal1Count <= 7 && y + diagonal1Count <= 7 && grid[x + diagonal1Count][y + diagonal1Count] != turn) {
            destinationSquares.add(new int[]{x + diagonal1Count, y + diagonal1Count});
        }

        if (SW && x - diagonal1Count >= 0 && y - diagonal1Count >= 0 && this.grid[x - diagonal1Count][y - diagonal1Count] != turn) {
            destinationSquares.add(new int[]{x - diagonal1Count, y - diagonal1Count});
        }
    }

    public void drawDestination() {
        Iterator var = destinationSquares.iterator();

        while (var.hasNext()) {
            int[] destination = (int[]) var.next();
            int x = destination[0];
            int y = destination[1];
            StdDraw.setPenColor(StdDraw.BOOK_LIGHT_BLUE);
            if (grid[x][y] == 'E') {
                StdDraw.filledSquare(x, y, 0.5);
            } else {
                StdDraw.filledSquare(x, y, 0.5);
                if (grid[x][y] == 'B') {
                    StdDraw.setPenColor(StdDraw.BLACK);
                } else if (grid[x][y] == 'W') {
                    StdDraw.setPenColor(StdDraw.WHITE);
                }
                StdDraw.filledCircle(x, y, 0.4);
            }
        }
    }

    public void handleMouseClick() {
        while (!StdDraw.isMousePressed()) {
        }

        int x = (int) Math.round(StdDraw.mouseX());
        int y = (int) Math.round(StdDraw.mouseY());

        while (StdDraw.isMousePressed()) {
        }

        StdOut.printf("Origin: %d, %d\n", new Object[]{x, y});
        String color = turn == 'W' ? "White" : "Black";
        if (grid[x][y] == turn) {
            this.x = x;
            this.y = y;
            StdOut.printf("%s: select a new square\n", new Object[]{color});
            this.draw();
            this.handleClick2();
        } else {
            StdOut.printf("%s: invalid move\n", new Object[]{color});
        }

    }

    public void handleClick2() {
        while (!StdDraw.isMousePressed()) {
        }

        int x = (int) Math.round(StdDraw.mouseX());
        int y = (int) Math.round(StdDraw.mouseY());

        while (StdDraw.isMousePressed()) {
        }

        StdOut.printf("Destination: %d, %d\n", new Object[]{x, y});
        if (grid[x][y] == turn) {
            destinationSquares.clear();
        }

        Iterator var = destinationSquares.iterator();

        int[] destination;
        do {
            if (!var.hasNext()) {
                StdOut.println("Invalid move");
                return;
            }

            destination = (int[]) var.next();
        } while (x != destination[0] || y != destination[1]);

        destinationSquares.clear();
        grid[x][y] = turn;
        grid[this.x][this.y] = 'E';
        turn = (char) (turn == 'W' ? 66 : 87);
        this.x = -1;
        this.y = -1;
        this.draw();
    }

    public void movePiece(int[] start, int[] destination) {
        grid[destination[0]][destination[1]] = grid[start[0]][start[1]];
        grid[start[0]][start[1]] = 'E';
    }

    private void nextTo(boolean[][] group, int x, int y) {
        group[x][y] = true;
        int y1 = y + 1;
        if (y1 < 8 && grid[x][y1] == grid[x][y] && !group[x][y1]) {
            nextTo(group, x, y1);
        }

        int x1 = x + 1;
        y1 = y + 1;
        if (x1 < 8 && y1 < 8 && grid[x1][y1] == grid[x][y] && !group[x1][y1]) {
            nextTo(group, x1, y1);
        }

        x1 = x + 1;
        if (x1 < 8 && grid[x1][y] == grid[x][y] && !group[x1][y]) {
            nextTo(group, x1, y);
        }

        x1 = x + 1;
        y1 = y - 1;
        if (x1 < 8 && y1 >= 0 && grid[x1][y1] == grid[x][y] && !group[x1][y1]) {
            nextTo(group, x1, y1);
        }

        y1 = y - 1;
        if (y1 >= 0 && grid[x][y1] == grid[x][y] && !group[x][y1]) {
            nextTo(group, x, y1);
        }

        x1 = x - 1;
        y1 = y - 1;
        if (x1 >= 0 && y1 >= 0 && grid[x1][y1] == grid[x][y] && !group[x1][y1]) {
            nextTo(group, x1, y1);
        }

        x1 = x - 1;
        if (x1 >= 0 && grid[x1][y] == grid[x][y] && !group[x1][y]) {
            nextTo(group, x1, y);
        }

        x1 = x - 1;
        y1 = y + 1;
        if (x1 >= 0 && y1 < 8 && grid[x1][y1] == grid[x][y] && !group[x1][y1]) {
            nextTo(group, x1, y1);
        }
    }

    public boolean whiteWon() {
        int white = 0;
        int x1 = -1;
        int y1 = -1;
        int groupsize = 0;
        boolean[][] group = new boolean[8][8];

        int x;
        int y;
        for(x = 0; x < 8; ++x) {
            for(y = 0; y < 8; ++y) {
                if (grid[x][y] == 'W') {
                    x1 = x;
                    y1 = y;
                    ++white;
                }
            }
        }

        nextTo(group, x1, y1);

        for(x = 0; x < 8; ++x) {
            for(y = 0; y < 8; ++y) {
                if (group[x][y]) {
                    ++groupsize;
                }
            }
        }

        return white == groupsize;
    }

    public boolean blackWon() {
        int black = 0;
        int x1 = -1;
        int y1 = -1;
        int groupsize = 0;
        boolean[][] group = new boolean[8][8];

        int x;
        int y;
        for(x = 0; x < 8; ++x) {
            for(y = 0; y < 8; ++y) {
                if (grid[x][y] == 'B') {
                    x1 = x;
                    y1 = y;
                    ++black;
                }
            }
        }

        nextTo(group, x1, y1);

        for(x = 0; x < 8; ++x) {
            for(y = 0; y < 8; ++y) {
                if (group[x][y]) {
                    ++groupsize;
                }
            }
        }

        return black == groupsize;
    }

}
